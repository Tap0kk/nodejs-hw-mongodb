{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "My Contacts App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Contacts App.\n"
  },
  "servers": [
    {
      "url": "https://nodejs-hw-mongodb-k6jr.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations about contacts."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all contacts",
        "operationId": "getAllContacts",
        "description": "Повертає список контактів користувача з опціональною фільтрацією, пагінацією та сортуванням.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "isFavourite",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Фільтрація за статусом \"улюблений\""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Номер сторінки для пагінації"
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Кількість елементів на сторінці"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "name",
                "email",
                "phoneNumber",
                "contactType",
                "isFavourite",
                "createdAt",
                "updatedAt"
              ]
            },
            "description": "Поле для сортування"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Порядок сортування"
          }
        ],
        "responses": {
          "200": {
            "description": "Контакти успішно отримано",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "description": "Створює новий контакт для авторизованого користувача.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Контакт успішно створено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Contact created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ContactResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContactById",
        "description": "Повертає один контакт за заданим ідентифікатором.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "description": "Унікальний ідентифікатор контакту",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c85"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Контакт успішно знайдено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ContactResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact by id",
        "operationId": "updateContact",
        "description": "Оновлює інформацію про існуючий контакт за його ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "description": "Унікальний ідентифікатор контакту",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c85"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Контакт успішно оновлено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact by id",
        "operationId": "deleteContact",
        "description": "Видаляє контакт за заданим ідентифікатором.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "description": "Унікальний ідентифікатор контакту",
            "schema": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c85"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Контакт успішно видалено (без тіла відповіді)"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ContactResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6818d350afed062c6892fe2c"
          },
          "name": {
            "type": "string",
            "example": "Andriy Pavlenko"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+380000000003"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "dmytro3@example.com"
          },
          "isFavourite": {
            "type": "boolean",
            "example": false
          },
          "contactType": {
            "type": "string",
            "enum": [
              "personal",
              "work",
              "family",
              "other",
              "home"
            ],
            "example": "home"
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "example": "https://res.cloudinary.com/demo/image/upload/v1621234567/photo.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954168"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-05-08T16:12:14.954170"
          }
        },
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "email",
          "isFavourite",
          "contactType",
          "createdAt",
          "updatedAt"
        ]
      },
      "ContactRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Andriy Pavlenko"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+380000000003"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "dmytro3@example.com"
          },
          "contactType": {
            "type": "string",
            "enum": [
              "personal",
              "work",
              "family",
              "other",
              "home"
            ],
            "example": "home"
          },
          "isFavourite": {
            "type": "boolean",
            "example": false
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact photo upload"
          }
        },
        "required": [
          "name",
          "phoneNumber",
          "contactType"
        ],
        "additionalProperties": false
      },
      "ContactUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Andriy Pavlenko"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+380000000003"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "dmytro3@example.com"
          },
          "contactType": {
            "type": "string",
            "enum": [
              "personal",
              "work",
              "family",
              "other",
              "home"
            ],
            "example": "home"
          },
          "isFavourite": {
            "type": "boolean",
            "example": true
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact photo upload"
          }
        },
        "additionalProperties": false
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Invalid request data"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Authentication failed or token missing"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Resource not found"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Server error occurred"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    }
  }
}